# Namespace
# Define o namespace "ecommerce" para agrupar todos os recursos relacionados à aplicação
apiVersion: v1
kind: Namespace
metadata:
  name: ecommerce
---
# Secret
# Armazena de forma segura as strings de conexão para o Azure Cosmos DB e o Azure SQL Database
apiVersion: v1
kind: Secret
metadata:
  name: db-secrets
  namespace: ecommerce
type: Opaque
data:
  cosmos-db-connection: <base64-encoded-cosmos-db-connection-string>
  sql-db-connection: <base64-encoded-sql-db-connection-string>
---
# Services
# Define os serviços que expõem os pods dos microsserviços
# Cada serviço garante a comunicação interna dentro do cluster Kubernetes

# Serviço para a interface de usuário (frontend)
apiVersion: v1
kind: Service
metadata:
  name: ui-frontend
  namespace: ecommerce
spec:
  selector:
    app: ui-frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: ClusterIP
---
# Serviço para a interface de administração do site
apiVersion: v1
kind: Service
metadata:
  name: admin-interface
  namespace: ecommerce
spec:
  selector:
    app: admin-interface
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
  type: ClusterIP
---
# Serviço para o gerenciamento de produtos
apiVersion: v1
kind: Service
metadata:
  name: product-management
  namespace: ecommerce
spec:
  selector:
    app: product-management
  ports:
    - protocol: TCP
      port: 8082
      targetPort: 8082
  type: ClusterIP
---
# Serviço para o processamento de pedidos
apiVersion: v1
kind: Service
metadata:
  name: order-processing
  namespace: ecommerce
spec:
  selector:
    app: order-processing
  ports:
    - protocol: TCP
      port: 8083
      targetPort: 8083
  type: ClusterIP
---
# Serviço para a gestão de clientes
apiVersion: v1
kind: Service
metadata:
  name: customer-management
  namespace: ecommerce
spec:
  selector:
    app: customer-management
  ports:
    - protocol: TCP
      port: 8084
      targetPort: 8084
  type: ClusterIP
---
# Serviço para o sistema de pagamento
apiVersion: v1
kind: Service
metadata:
  name: payment-processing
  namespace: ecommerce
spec:
  selector:
    app: payment-processing
  ports:
    - protocol: TCP
      port: 8085
      targetPort: 8085
  type: ClusterIP
---
# Serviço para autenticação e autorização
apiVersion: v1
kind: Service
metadata:
  name: authentication-authorization
  namespace: ecommerce
spec:
  selector:
    app: authentication-authorization
  ports:
    - protocol: TCP
      port: 8086
      targetPort: 8086
  type: ClusterIP
---
# Serviço para notificações
apiVersion: v1
kind: Service
metadata:
  name: notification
  namespace: ecommerce
spec:
  selector:
    app: notification
  ports:
    - protocol: TCP
      port: 8087
      targetPort: 8087
  type: ClusterIP
---
# Serviço para gerenciamento de estoque
apiVersion: v1
kind: Service
metadata:
  name: inventory-management
  namespace: ecommerce
spec:
  selector:
    app: inventory-management
  ports:
    - protocol: TCP
      port: 8088
      targetPort: 8088
  type: ClusterIP
---
# Serviço para envio e logística
apiVersion: v1
kind: Service
metadata:
  name: shipping-logistics
  namespace: ecommerce
spec:
  selector:
    app: shipping-logistics
  ports:
    - protocol: TCP
      port: 8089
      targetPort: 8089
  type: ClusterIP
---
# Network Policies
# Define políticas de rede para controlar o tráfego de entrada e saída dos pods

# Política de rede padrão que bloqueia todo o tráfego de entrada e saída por padrão
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
  namespace: ecommerce
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
  ingress: []
  egress: []
---
# Política de rede que permite o tráfego de entrada no serviço order-processing do serviço ui-frontend
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ui-to-api
  namespace: ecommerce
spec:
  podSelector:
    matchLabels:
      app: order-processing
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app: ui-frontend
      ports:
        - protocol: TCP
          port: 8083
---
# Ingress Controller
# Gerencia o acesso externo aos serviços no cluster Kubernetes, roteando tráfego HTTP/HTTPS

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ecommerce-ingress
  namespace: ecommerce
spec:
  rules:
    - host: ecommerce.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: ui-frontend
                port:
                  number: 80
          - path: /admin
            pathType: Prefix
            backend:
              service:
                name: admin-interface
                port:
                  number: 8081
          - path: /products
            pathType: Prefix
            backend:
              service:
                name: product-management
                port:
                  number: 8082
          - path: /orders
            pathType: Prefix
            backend:
              service:
                name: order-processing
                port:
                  number: 8083
          - path: /customers
            pathType: Prefix
            backend:
              service:
                name: customer-management
                port:
                  number: 8084
          - path: /payments
            pathType: Prefix
            backend:
              service:
                name: payment-processing
                port:
                  number: 8085
          - path: /auth
            pathType: Prefix
            backend:
              service:
                name: authentication-authorization
                port:
                  number: 8086
          - path: /notifications
            pathType: Prefix
            backend:
              service:
                name: notification
                port:
                  number: 8087
          - path: /inventory
            pathType: Prefix
            backend:
              service:
                name: inventory-management
                port:
                  number: 8088
          - path: /shipping
            pathType: Prefix
            backend:
              service:
                name: shipping-logistics
                port:
                  number: 8089
# Namespace:
# Explica que o namespace ecommerce é criado para organizar e isolar todos os recursos da aplicação.

# Secrets:
# Explica que o secret db-secrets é usado para armazenar de forma segura as strings de conexão dos bancos de dados.
#Services:
# Cada serviço é documentado para explicar qual microsserviço ele expõe e como ele é acessado.

#Network Policies:
# Descreve as políticas de rede que controlam o tráfego de entrada e saída, incluindo uma política padrão de negação e uma política
# específica para permitir comunicação entre certos serviços.

#Ingress Controller:
# Explica que o Ingress Controller gerencia o acesso externo e roteia o tráfego HTTP/HTTPS com base nas regras definidas.
